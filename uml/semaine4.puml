@startuml

package dice {
  class Dice {
    - m_val: int
    + Dice()
    + Dice(val: int)
    + getVal(): int
    + rollDice(nRolls: int): int
    + rollDice(): int
    + rollDice(nRolls: int, deroulement: ArrayList<Integer>): int
    + toString(): String
  }
  class D4 {
    + D4()
  }
  class D6 {
    + D6()
   }
  class D8 {
    + D8()
  }
  class D10 {
    + D10()
  }
  class D12 {
    + D12()
  }
  class D20 {
      + 20()
  }
  Dice <|-- D4
  Dice <|-- D6
  Dice <|-- D8
  Dice <|-- D10
  Dice <|-- D12
  Dice <|-- D20
}

package entites {
  class Attaques {
    - m_nom: String
    - m_portee: int
    - m_de: Dice
    - m_nbDe: int
    + Attaques()
    + Attaques(nom: String)
    + Attaques(nom: String, portee: int)
    + Attaques(nom: String, portee: int, de: Dice)
    + Attaques(nom: String, portee: int, de: Dice, nbDe: int)
    + calculerDegats(): int
    + getNom(): String
    + getPortee(): int
    + getDe(): Dice
    + getNbDe(): int
    + toString(): String
  }

  abstract class Entites {
    - m_attaque: Attaques
    - m_PV: int
    - m_PVMax: int
    - m_force: int
    - m_dexterite: int
    - m_initiative: int
    - m_CA: int
    - m_vitesse: int
    - m_pseudo: String
    + Entites()
    + Entites(Attaques, int, int, int, int, int, int)
    + degatsAttaque(ArrayList<Integer>): int
    + attaqueTouche(int, ArrayList<Integer>): Boolean
    + attaquer(Entites): ArrayList<Integer>
    + estBlesse(int): void
    + getMatricule(): String
    + getPVMax(): int
    + getPV(): int
    + getForce(): int
    + getDexterite(): int
    + getInitiative(): int
    + getCA(): int
    + getVitesse(): int
    + getAttaque(): Attaques
    + setAttaque(Attaques): void
    + setForce(int): void
    + setDexterite(int): void
    + setPseudo(String): void
    + getPseudo(): String
    + estJouable(): boolean
    + toString(): String
    + equals(Object): boolean
  }

  class Monstres {
    - m_espece: String
    - m_num: int
    + Monstres()
    + Monstres(String, int, String, Attaques, int, int, int, int, int, int)
    + getStats(): String
    + getNom(): String
    + getEspece(): String
    + getMatricule(): String
    + getNum(): int
    + toString(): String
    + equals(Object): boolean
  }
  Entites <|-- Monstres
}

package entites.personnages {
  class Personnages {
    - m_nom: String
    - m_race: Races
    - m_classe: Classes
    - m_inventaire: ArrayList<equipements.Equipements>
    - m_arme: equipements.Armes
    - m_armure: equipements.Armures
    + Personnages()
    + Personnages(String, Races, Classes, int, int, int, ArrayList<equipements.Equipements>, equipements.Armes, equipements.Armures, int)
    + Personnages(String, Races, Classes, int, int, int, int)
    + equiperArme(equipements.Armes): void
    + equiperArmure(equipements.Armures): void
    + prendre(equipements.Equipements): void
    + getNom(): String
    + getMatricule(): String
    + getRace(): Races
    + getClasses(): Classes
    + getForce(): int
    + getVitesse(): int
    + getCA(): int
    + getAttaque(): entites.Attaques
    + estJouable(): boolean
    + getInventaire(): ArrayList<equipements.Equipements>
    + getArme(): equipements.Armes
    + getArmure(): equipements.Armures
    + getStats(): String
    + toString(): String
  }
  entites.Entites <|-- Personnages
}

package entites.personnages.races {
  class Races {
    - m_nom: String
    + Races()
    + Races(String)
    + getNom(): String
    + getBonusForce(): int
    + getBonusDexterite(): int
    + getBonusVitesse(): int
    + getM_bonusInitiative(): int
    + getBonusPVMax(): int
    + toString(): String
  }
    class Elfes {
        -m_bonusDexterite : int
        +getBonusDexterite() : int
    }
    class Halfelins {
        -m_bonusDexterite : int
        -m_bonusVitesse : int
    }
    class Humains {
        -m_bonusForce : int
        -m_bonusDexterite : int
        -m_bonusVitesse : int
        -m_bonusInitiative : int
        -m_bonusPVMax : int
    }
    class Nains {
        -m_bonusForce : int
    }
  Races <|-- Elfes
  Races <|-- Halfelins
  Races <|-- Humains
  Races <|-- Nains
}

package entites.personnages.classes {
  class Classes {
    - m_nom: String
    - m_PVMax: int
    - m_inventaire: ArrayList<equipements.Equipements>
    + Classes()
    + Classes(String)
    + Classes(String, int)
    + getStats(): String
    + getNom(): String
    + getPVMax(): int
    + getInventaire(): ArrayList<equipements.Equipements>
    + setInventaire(equipements.Equipements): void
    + toString(): String
  }
  class Guerriers
  class Roublards
  class Clercs
  class Magiciens
  Classes <|-- Guerriers
  Classes <|-- Roublards
  Classes <|-- Clercs
  Classes <|-- Magiciens
}

package entites.personnages.sorts {

    class Sorts {
        - String m_nom
        - String m_description
        + Sorts()
        + Sorts(String nom, String description)
        + String getNom()
        + String getDescription()
        + void lancerSort()
        + String toString()
    }

    class Guerison {
        + Guerison()
        + void lancerSort(entites.personnages.Personnages personnage)
        + void lancerSort()
    }

    class ArmeMagique {
        + ArmeMagique()
        + void lancerSort(java.util.ArrayList<entites.personnages.equipements.Equipements> inventaire, entites.personnages.equipements.armes.Armes arme)
        + void lancerSort()
    }

    class BoogieWoogie {
        + BoogieWoogie()
        + void lancerSort(donjons.Donjons donjons, entites.personnages.Personnages cible1, entites.personnages.Personnages cible2)
        + void lancerSort()
    }

    Sorts <|-- Guerison
    Sorts <|-- ArmeMagique
    Sorts <|-- BoogieWoogie
}

package entites.personnages.equipements {
  abstract class Equipements {
    - m_nom: String
    - m_categorie: String
    + Equipements()
    + Equipements(String)
    + Equipements(String, String)
    + getNom(): String
    + getCategorie(): String
    + toString(): String
  }

  abstract class Armes {
    - m_attaques: entites.Attaques
    - m_MalusVitesse: int
    - m_BonusForce: int
    + Armes(String, entites.Attaques, int, int, String)
    + calculerDegats(): int
    + getAttaques(): entites.Attaques
    + getMalusVitesse(): int
    + getBonusForce(): int
    + equals(Object): boolean
    + toString(): String
  }
  Equipements <|-- Armes

  abstract class Armures {
    - m_CA: int
    - m_MalusVitesse: int
    + Armures(String, int, int, String)
    + getCA(): int
    + getMalusVitesse(): int
    + equals(Object): boolean
    + toString(): String
  }
  Equipements <|-- Armures

  class PasArmure {
    + PasArmure()
  }
  Armures <|-- PasArmure

  class Courante
  class DeGuerre
  class Distance
  Armes <|-- Courante
  Armes <|-- DeGuerre
  Armes <|-- Distance

  class Poing
  class Baton
  class MasseArme
  class Rapiere
  class EpeeLongue
  class ArbaleteLegere
  class ArcCourt
  class Fronde
  Courante <|-- Poing
  Courante <|-- Baton
  Courante <|-- MasseArme
  DeGuerre <|-- Rapiere
  DeGuerre <|-- EpeeLongue
  Distance <|-- ArbaleteLegere
  Distance <|-- ArcCourt
  Distance <|-- Fronde

  class Legeres
  class Lourdes
  class DemiPlate
  class Harnois
  class CoteMaille
  Armures <|-- Legeres
  Armures <|-- Lourdes
  Legeres <|-- DemiPlate
  Lourdes <|-- Harnois
  Lourdes <|-- CoteMaille
}

package donjons {
  class Donjons {
    - m_num: int
    - m_nom: String
    - m_desc: String
    - m_hauteur: int
    - m_largeur: int
    - m_joueurs: Map<entites.Positions, entites.personnages.Personnages>
    - m_ennemis: Map<entites.Positions, entites.Monstres>
    - m_loot: Map<entites.Positions, equipements.Equipements>
    - m_obstacles: ArrayList<entites.Positions>
    - m_map: String[]
    - m_initiatives: Map<entites.Entites, Integer>
    - m_ordre: ArrayList<entites.Entites>
    + Donjons()
    + Donjons(String, int, int, int)
    + Donjons(...)
    + addJoueur(entites.Positions, entites.personnages.Personnages): void
    + moveJoueur(entites.personnages.Personnages, entites.Positions): void
    + removeJoueur(entites.Positions): void
    + addEnnemi(entites.Positions, entites.Monstres): void
    + moveEnnemi(entites.Monstres, entites.Positions): void
    + removeEnnemi(entites.Positions): void
    + addLoot(entites.Positions, equipements.Equipements): void
    + removeLoot(entites.Positions): void
    + addObstacle(entites.Positions): void
    + removeObstacle(entites.Positions): void
    + calculerOrdre(): ArrayList<entites.Entites>
    + tourSuivant(): ArrayList<entites.Entites>
    + afficherTour(): void
    + estLibre(entites.Positions): boolean
    + lootPresent(entites.Positions): Boolean
    + afficherMap(): void
    + updateMap(): void
    + getNom(): String
    + getDesc(): String
    + setDesc(String): void
    + getHauteur(): int
    + getLargeur(): int
    + getJoueurs(): Map<entites.Positions, entites.personnages.Personnages>
    + getPersonnagePosition(entites.personnages.Personnages): entites.Positions
    + getEnnemiPosition(entites.Monstres): entites.Positions
    + getEnnemis(): Map<entites.Positions, entites.Monstres>
    + getLoot(): Map<entites.Positions, equipements.Equipements>
    + getObstacles(): ArrayList<entites.Positions>
    + getMap(): String
    + getInitiatives(): Map<entites.Entites, Integer>
    + getOrdre(): ArrayList<entites.Entites>
    + getInfos(): String
    + toString(): String
  }
  class Donjon1 {
    + Donjon1()
  }
  class Donjon2 {
    + Donjon2()
  }
  class Donjon3 {
    + Donjon3()
  }
  Donjons <|-- Donjon1
  Donjons <|-- Donjon2
  Donjons <|-- Donjon3

  class Positions {
      + getX(): int
      + getY(): int
    }
   Donjons <|-- Positions
}
package utilities {

    class Create {
        -Create()
        +creerPartie() : ArrayList<Personnages>
        +creerPersonnage(Partie : ArrayList<Personnages>) : Personnages
        +creerAttaque() : Attaques
        +creerMonstre(bestiaire : ArrayList<Monstres>, Partie : ArrayList<Personnages>) : Monstres
        +creerBestiaire(Partie : ArrayList<Personnages>) : ArrayList<Monstres>
        +selectEquipement() : Equipements
        +column(alphaVal : String) : int
        +creerObstacle(donjon : Donjons) : boolean
        +PositionMonstre(donjon : Donjons, monstre : Monstres) : void
        +PositionPersonnage(donjon : Donjons, personnage : Personnages) : void
        +PositionEquipement(donjon : Donjons) : void
        +yesNoQuestion(question : String) : boolean
        +donjonParDefaut(build : Donjons, joueurs : ArrayList<Personnages>) : Donjons
        +creerDonjon(joueurs : ArrayList<Personnages>, num : int) : Donjons
        +choixArme(p : Personnages) : void
        +choixArmure(p : Personnages) : void
        +commentaire(p : Personnages) : void
        +debutDonjon(build : Donjons) : void
        +selectNombre(question : String, min : int, max : int) : int
    }

    class Tour {
        class Tour {
                -m_donjons : Donjons
                -m_joueur : Personnages
                -m_monstre : Monstres
                -m_actions : int
                -continuDonjon : int
                -reussiDonjon : int
                -echecDonjon : int

                +Tour()
                +Tour(e : Entites, d : Donjons)
                +Attaquer(attaquant : Entites, cible : Entites) : void
                +choixCibleMonstre() : Monstres
                +choixCiblePersonnage() : Personnages
                +joueTour() : int
                -selectionSort() : boolean
                -changeEquipement() : boolean
                -deplacerJoueur() : boolean
                -deplacerMonstre() : boolean
                -deplacerEntite() : boolean
                -infligeDegats() : boolean
                -interventionMJ() : void
                -tourJoueur() : int
                +tourMonstre() : int


            }
    }
}
@enduml
